import websocket
import json
import numpy as np
import pandas as pd
import time
from binance.client import Client
from binance.enums import ORDER_TYPE_LIMIT, ORDER_SIDE_BUY, ORDER_SIDE_SELL, TIME_IN_FORCE_GTC
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import talib

# Binance API AnahtarlarÄ± (DEMO Ä°Ã‡Ä°N)
API_KEY = "YOUR_API_KEY"
API_SECRET = "YOUR_SECRET_KEY"
client = Client(API_KEY, API_SECRET)

# Pump AlgÄ±lama ve Teknik Analiz EÅŸiÄŸi
LARGE_TRADE_THRESHOLD = 50000  # 50.000 USDT Ã¼zerindeki iÅŸlemleri takip et
PUMP_THRESHOLD = 0.05  # %5'ten fazla ani yÃ¼kseliÅŸlerde iÅŸlem aÃ§
STOP_LOSS_FACTOR = 0.97  # %3 zarar durdurma
TAKE_PROFIT_FACTOR = 1.05  # %5 kar al

# GerÃ§ek ZamanlÄ± Veri Ã‡ekme
trade_data = []

def on_message(ws, message):
    global trade_data
    data = json.loads(message)
    price = float(data['p'])  # GÃ¼ncel fiyat
    volume = float(data['q']) * price  # Ä°ÅŸlem bÃ¼yÃ¼klÃ¼ÄŸÃ¼ (USDT cinsinden)
    timestamp = int(data['T'])
    trade_data.append([timestamp, price, volume])
    
    if volume > LARGE_TRADE_THRESHOLD:
        print(f"ðŸš¨ BÃ¼yÃ¼k Ä°ÅŸlem: {volume} USDT | Fiyat: {price}")
    
    if len(trade_data) > 100:
        df = pd.DataFrame(trade_data, columns=['timestamp', 'price', 'volume'])
        df['return'] = df['price'].pct_change()
        
        rsi = talib.RSI(df['price'].values, timeperiod=14)
        macd, macdsignal, macdhist = talib.MACD(df['price'].values, fastperiod=12, slowperiod=26, signalperiod=9)
        bb_upper, bb_middle, bb_lower = talib.BBANDS(df['price'].values, timeperiod=20)
        
        if df['return'].iloc[-1] > PUMP_THRESHOLD and rsi[-1] < 70 and macd[-1] > macdsignal[-1] and df['price'].iloc[-1] > bb_middle[-1]:
            print("ðŸš€ ALIM SÄ°NYALÄ°: Pump Tespit Edildi!")
            place_order("BTCUSDT", ORDER_SIDE_BUY, 0.01, df['price'].iloc[-1])

def place_order(symbol, side, quantity, entry_price):
    order = client.create_order(
        symbol=symbol,
        side=side,
        type=ORDER_TYPE_LIMIT,
        timeInForce=TIME_IN_FORCE_GTC,
        quantity=quantity,
        price=str(entry_price)
    )
    print(f"ðŸ“Œ Ä°ÅŸlem AÃ§Ä±ldÄ±: {side} {quantity} {symbol} @ {entry_price}")
    
    stop_loss = entry_price * STOP_LOSS_FACTOR
    take_profit = entry_price * TAKE_PROFIT_FACTOR
    print(f"ðŸ›‘ Stop-Loss: {stop_loss}, ðŸŽ¯ Take-Profit: {take_profit}")
    return order

def on_error(ws, error):
    print(f"Hata: {error}")

def on_close(ws, close_status_code, close_msg):
    print("BaÄŸlantÄ± kapandÄ±.")

def on_open(ws):
    symbol = "btcusdt"
    params = {
        "method": "SUBSCRIBE",
        "params": [f"{symbol}@trade"],
        "id": 1
    }
    ws.send(json.dumps(params))

ws = websocket.WebSocketApp("wss://stream.binance.com:9443/ws", on_message=on_message, on_error=on_error, on_close=on_close)
ws.on_open = on_open
ws.run_forever()
